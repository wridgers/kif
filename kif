#!/usr/bin/env bash

set -o errexit
set -o nounset
set -o pipefail

# Check we have the requirements
command -v getopts > /dev/null 2 >& 1 || { echo >&2 "Please install getopts."; exit 1; }
command -v gpg > /dev/null 2 >& 1 || { echo >&2 "Please install gpg."; exit 1; }
command -v gzip > /dev/null 2 >& 1 || { echo >&2 "Please install gzip."; exit 1; }
command -v shasum > /dev/null 2 >& 1 || { echo >&2 "Please install shasum."; exit 1; }
command -v tee > /dev/null 2 >& 1 || { echo >&2 "Please install tee."; exit 1; }

# colours
RED='\033[0;31m'
GREEN='\033[0;32m'
ORANGE='\033[0;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
YELLOW='\033[1;33m'
WHITE='\033[1;37m'
NC='\033[0m'

# if settings file doesn't exist
if [ ! -f ~/.kifrc ]
then
  echo -e "${RED}Missing ~/.kifrc${NC}"
  exit
fi

# grab the settings
source ~/.kifrc

# check the gpg key is working

function upload {
  FILENAME=$1

  # if the file doesn't exist and it's not a directory, die
  if [ ! -f "$FILENAME" ] && [ ! -d "$FILENAME" ]
  then
    echo -e "${RED}MISSING${NC}, file '${FILENAME}' does not exist."
    return
  fi

  # directories not yet implemented
  if [ -d "$FILENAME" ]
  then
    echo -e "${ORANGE}Warning${NC}, uploading of directories not yet supported."
    return
  fi

  ORIGIN=$(hostname)
  FILEPATH=$(pwd)
  FILESIZE=$(du -h "${FILENAME}" | awk '{print $1}')
  HASH=$(shasum "${FILENAME}" | awk '{print $1}')
  REMOTE_PATH="${KIF_LOCATION}/store/${HASH}"

  if ssh $KIF_HOST test -e $REMOTE_PATH
  then
    echo -e "${BLUE}Skipping${NC} ${FILENAME} with hash ${PURPLE}${HASH}${NC}"
    return
  fi

  echo -en "${GREEN}Backing up${NC} ${FILENAME} (${CYAN}${FILESIZE}${NC}) as ${PURPLE}${HASH}${NC} ..."

  # encrypt, gzip, and transfer the file. use tee to grab a checksum
  LOCAL_CHECKSUM=$(gpg --encrypt --recipient "${KIF_GPGKEY}" -o - $FILENAME |\
  gzip -f |\
  tee >(
    ssh $KIF_HOST "cat > ${REMOTE_PATH}"
  ) > >(
    shasum -a 256 | awk '{print $1}'
  ))

  # get remote checksum for comparison
  REMOTE_CHECKSUM=$(ssh $KIF_HOST "sha256sum ${REMOTE_PATH} | awk '{print \$1}'")

  # use our checksums to ocnfirm the upload went okay
  if [ $LOCAL_CHECKSUM != $REMOTE_CHECKSUM ]
  then
    echo -e " ${RED}CHECKSUM VERIFICATION FAILED!${NC}"

    delete $HASH
    exit 1;
  fi

  # add to kif.db
  ssh $KIF_HOST "sqlite ${KIF_LOCATION}/kif.db \"INSERT INTO store ('hash', 'origin', 'path', 'file', 'size') VALUES ('${HASH}', '${ORIGIN}', '${FILEPATH}', '${FILENAME}', '${FILESIZE}');\"";

  echo -e " ${GREEN}okay! ;-)${NC}"
}

function fetch {
  HASH=$1

  # get the filename
  FILENAME=$(ssh $KIF_HOST "sqlite ${KIF_LOCATION}/kif.db \"SELECT file FROM store WHERE hash='${HASH}';\"";);

  echo -e "Fetching ${PURPLE}${HASH}${NC} to ${FILENAME}.gpg ..."

  # download and extract
  ssh $KIF_HOST "cat ${KIF_LOCATION}/store/${HASH}" | gzip -d -c | gpg --decrypt > $FILENAME

  echo -e " ${GREEN}okay! ;-)${NC}"
}

function delete {
  HASH=$1

  echo -en "${RED}Deleting${NC} file with hash ${PURPLE}${HASH}${NC} ..."

  ssh $KIF_HOST "rm -f ${KIF_LOCATION}/store/${HASH}"
  ssh $KIF_HOST "sqlite ${KIF_LOCATION}/kif.db \"DELETE FROM store WHERE hash='${HASH}';\""

  echo -e " ${RED}removed!${NC}"
}

function search {
  TERM=$1

  echo -e "Searching for ${YELLOW}${TERM}${NC} ..."
  ssh $KIF_HOST "sqlite -column -header ${KIF_LOCATION}/kif.db \"SELECT * FROM store WHERE file LIKE '%${TERM}%' OR path LIKE '%${TERM}%' OR hash='${TERM}' ORDER BY date DESC;\""
}

function usage {
  echo "usage: kif -sgh <FILE> ..."
  echo "   -s TERM    search for TERM and display results"
  echo "   -f HASH    fetch the HASH from the store"
  echo "   -d HASH    delete the HASH from the store"
  echo "   -h         this help"
}

# process arguments
while getopts ":s:f:d:h" OPTION
do
  case $OPTION in
    s  ) search $OPTARG; exit;;
    f  ) fetch $OPTARG; exit;;
    d  ) delete $OPTARG; exit;;

    h  ) usage; exit;;
    \? ) usage; exit;;
    :  ) echo -e "${RED}Missing${NC} option argument for -${OPTARG}" >&2; exit 1;;
  esac

  # remove used argument
  shift $((OPTIND-1))
done

# display help if no arguments
if [[ $# -eq 0 ]]
then
  usage
  exit
fi

# get the size of the input files
SIZE=$(du -hc "$@" | grep "total$" | awk '{print $1}')

echo -e "${GREEN}Backing up${NC} ${CYAN}${SIZE}${NC} in ${ORANGE}$#${NC} file(s)."

START_TIME=$(date +%s)

COUNT=1
for ARG in $*
do
  echo -ne "${ORANGE}[ ${COUNT} / $# ]${NC} "
  upload "$ARG"

  COUNT=$((COUNT + 1))
done

END_TIME=$(date +%s)
TOTAL_TIME=$(($END_TIME - $START_TIME))

echo -e "${GREEN}Backup completed${NC} in ${ORANGE}${TOTAL_TIME}${NC} second(s)."
